{"ast":null,"code":"var _jsxFileName = \"/Users/joshreep/Projects/clc-website/components/Link.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport NextLink from 'next/link';\nimport isHrefLocal from 'utilities/isHrefLocal';\n\nconst propsAreLinkProps = props => {\n  return ['string', 'object'].includes(typeof props.href) || typeof props.href === 'string' && isHrefLocal(props.href) || 'as' in props || 'replace' in props || 'scroll' in props || 'shallow' in props || 'passHref' in props || 'prefetch' in props;\n};\n\nconst Link = props => {\n  if (propsAreLinkProps(props)) {\n    const {\n      children\n    } = props,\n          linkProps = _objectWithoutProperties(props, [\"children\"]);\n\n    return __jsx(NextLink, _extends({}, linkProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 16\n      }\n    }), children);\n  }\n\n  return __jsx(\"a\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }\n  }), props.children);\n};\n\nexport default Link;","map":{"version":3,"sources":["/Users/joshreep/Projects/clc-website/components/Link.tsx"],"names":["React","NextLink","isHrefLocal","propsAreLinkProps","props","includes","href","Link","children","linkProps"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAA8E,OAA9E;AACA,OAAOC,QAAP,MAAqD,WAArD;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;;AAUA,MAAMC,iBAAiB,GAAIC,KAAD,IAA2C;AACjE,SACI,CAAC,QAAD,EAAW,QAAX,EAAqBC,QAArB,CAA8B,OAAOD,KAAK,CAACE,IAA3C,KACC,OAAOF,KAAK,CAACE,IAAb,KAAsB,QAAtB,IAAkCJ,WAAW,CAACE,KAAK,CAACE,IAAP,CAD9C,IAEA,QAAQF,KAFR,IAGA,aAAaA,KAHb,IAIA,YAAYA,KAJZ,IAKA,aAAaA,KALb,IAMA,cAAcA,KANd,IAOA,cAAcA,KARlB;AAUH,CAXD;;AAaA,MAAMG,IAAI,GAAIH,KAAD,IAAsB;AAC/B,MAAID,iBAAiB,CAACC,KAAD,CAArB,EAA8B;AAC1B,UAAM;AAAEI,MAAAA;AAAF,QAA6BJ,KAAnC;AAAA,UAAqBK,SAArB,4BAAmCL,KAAnC;;AAEA,WAAO,MAAC,QAAD,eAAcK,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA0BD,QAA1B,CAAP;AACH;;AAED,SAAO,wBAAOJ,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAeA,KAAK,CAACI,QAArB,CAAP;AACH,CARD;;AAUA,eAAeD,IAAf","sourcesContent":["import React, { ReactChildren, DetailedHTMLProps, AnchorHTMLAttributes } from 'react'\nimport NextLink, { LinkProps as NextLinkProps } from 'next/link'\n\nimport isHrefLocal from 'utilities/isHrefLocal'\n\ninterface NLinkProps extends NextLinkProps {\n    children: ReactChildren\n}\n\ninterface AnchorProps extends DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement> {}\n\nexport type LinkProps = NLinkProps | AnchorProps\n\nconst propsAreLinkProps = (props: LinkProps): props is NLinkProps => {\n    return (\n        ['string', 'object'].includes(typeof props.href) ||\n        (typeof props.href === 'string' && isHrefLocal(props.href)) ||\n        'as' in props ||\n        'replace' in props ||\n        'scroll' in props ||\n        'shallow' in props ||\n        'passHref' in props ||\n        'prefetch' in props\n    )\n}\n\nconst Link = (props: LinkProps) => {\n    if (propsAreLinkProps(props)) {\n        const { children, ...linkProps } = props\n\n        return <NextLink {...linkProps}>{children}</NextLink>\n    }\n\n    return <a {...props}>{props.children}</a>\n}\n\nexport default Link\n"]},"metadata":{},"sourceType":"module"}